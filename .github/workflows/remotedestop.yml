name: REMOTE DESKTOP

on:
  workflow_dispatch:
    inputs:
      code:
        description: "🔑 Enter 12-Digit Access Code"
        required: true
        type: string

env:
  BASE_DIR: "C:\RemoteDesktop"
  SESSION_DURATION: 43200
  RETRY_ATTEMPTS: 3

jobs:
  remote_connection:
    name: 🖥️ REMOTE DESKTOP CONSOLE
    runs-on: windows-latest
    timeout-minutes: ${{ env.SESSION_DURATION }}

    steps:
    - name: 🔒 System Configuration
      shell: powershell
      run: |
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        Write-Host "🛡️  DISABLING SYSTEM PROTECTIONS"
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
        Set-MpPreference -DisableRealtimeMonitoring $true
        Write-Host "✅ System protections disabled successfully"
        Write-Host ""

    - name: 📦 Software Installation
      shell: powershell
      run: |
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        Write-Host "📥 INSTALLING REQUIRED COMPONENTS"
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        function Install-Software {
            param ($package)
            $attempt = 1
            while ($attempt -le ${{ env.RETRY_ATTEMPTS }}) {
                try {
                    Write-Host "⟳ Attempt $attempt : $package"
                    choco install $package -y --force --ignore-checksums
                    Write-Host "✔ $package installed successfully"
                    return
                } catch {
                    Write-Host "⚠ Attempt $attempt failed"
                    $attempt++
                    if ($attempt -le ${{ env.RETRY_ATTEMPTS }}) {
                        Start-Sleep -Seconds 10
                    }
                }
            }
            Write-Host "❌ Failed to install $package"
        }

        Install-Software "chrome-remote-desktop-host"
        Install-Software "googlechrome"
        Write-Host ""

    - name: 🚀 Launching Services
      shell: powershell
      run: |
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        Write-Host "🚀 INITIALIZING REMOTE SERVICES"
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        $servicePath = @(
            "${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe",
            "${Env:PROGRAMFILES}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
        ) | Where-Object { Test-Path $_ } | Select-Object -First 1

        if ($servicePath) {
            Start-Process $servicePath -WindowStyle Hidden
            Write-Host "✔ Remote desktop service started"
        } else {
            Write-Host "❌ Service executable not found"
        }
        Write-Host ""

    - name: 🔗 Establishing Connection
      shell: powershell
      run: |
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        Write-Host "🔗 CONNECTING TO REMOTE SESSION"
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        if (${{ inputs.code }} -match '^\d{12}$') {
            Start-Process "chrome-remote-desktop-host" -ArgumentList "--code=${{ inputs.code }} --pin=123456" -WindowStyle Hidden
            Write-Host "✔ Connection established with code: ${{ inputs.code }}"
        } else {
            Write-Host "❌ Invalid code format - must be 12 digits"
        }
        Write-Host ""

    - name: 🕒 Active Session Monitor
      shell: powershell
      run: |
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        Write-Host "🔄 SESSION ACTIVE - MONITORING CONNECTION"
        Write-Host "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        Write-Host "🖥️  Remote access is now available"
        Write-Host ""
        
        $startTime = Get-Date
        while ($true) {
            $elapsed = (Get-Date) - $startTime
            $days = $elapsed.Days
            $hours = $elapsed.Hours
            $minutes = $elapsed.Minutes
            
            Write-Host "🟢 CONNECTED | Uptime: ${days}d ${hours}h ${minutes}m"
            Start-Sleep -Seconds 60
        }

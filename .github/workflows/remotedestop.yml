name: 🎮 FREE FIRE RIPPER

on:
  workflow_dispatch:
    inputs:
      code:
        description: "📋 Paste Chrome Remote Desktop Code"
        required: true

jobs:
  build:
    name: "🔥 Free Fire Ripper Lab Running"
    runs-on: windows-latest
    timeout-minutes: 43800  # 30 days

    steps:
    # 🔒 Disable Firewall
    - name: "🛡️ Disable Windows Firewall"
      run: |
        try {
          Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
          Write-Host "✅ Firewall disabled successfully!"
        } catch {
          Write-Host "⚠️ Failed to disable firewall. Continuing anyway..."
        }

    # 📦 Install Required Packages
    - name: "📥 Install Chrome Remote Desktop & Chrome"
      run: |
        function Install-PackageWithRetry {
            param ([string]$packageName)
            $maxRetries = 3
            $retryCount = 0
            while ($retryCount -lt $maxRetries) {
                try {
                    choco install $packageName -y --ignore-checksums
                    Write-Host "✅ $packageName installed successfully!"
                    return
                } catch {
                    Write-Host "🔄 Retrying $packageName install ($($retryCount+1)/$maxRetries)"
                    Start-Sleep -Seconds 10
                    $retryCount++
                }
            }
            Write-Host "❌ Failed to install $packageName after $maxRetries attempts"
        }
        
        # Install packages
        Install-PackageWithRetry -packageName "chrome-remote-desktop-host"
        Install-PackageWithRetry -packageName "googlechrome"
        Install-PackageWithRetry -packageName "7zip"

    # ⬇️ Download Free Fire Ripper Package
    - name: "📦 Download Free Fire Tools"
      continue-on-error: true
      run: |
        $downloadPath = "C:\Users\$Env:USERNAME\Documents\ffripper.zip"
        Write-Host "🔽 Downloading Free Fire Ripper package..."
        try {
          Invoke-WebRequest -Uri "https://drive.usercontent.google.com/download?id=11EUFz6hufNT1g56-CmOJw9_KxMERZxhe&export=download" -OutFile $downloadPath
          Write-Host "✅ Download completed!"
        } catch {
          Write-Host "❌ Download failed: $_"
          exit 1
        }

    # 📂 Extract Files
    - name: "🗂️ Extract Free Fire Tools"
      continue-on-error: true
      run: |
        cd C:\Users\$Env:USERNAME\Documents
        Write-Host "🔍 Extracting files..."
        try {
          7z x ffripper.zip -y -o"C:\Users\$Env:USERNAME\Documents\FreeFireRipper"
          Write-Host "✅ Extraction completed!"
        } catch {
          Write-Host "❌ Extraction failed: $_"
        }

    # 🖥️ Setup Chrome Remote Desktop
    - name: "🚀 Start Chrome Remote Desktop"
      run: |
        function Start-RemoteDesktop {
          $paths = @(
            "${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe",
            "${Env:PROGRAMFILES}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
          )
          foreach ($path in $paths) {
              if (Test-Path $path) {
                Write-Host "🔌 Starting Chrome Remote Desktop from $path"
                & $path
                return
              }
          }
          Write-Host "❌ Chrome Remote Desktop executable not found!"
        }
        Start-RemoteDesktop

    # 🔗 Create Desktop Shortcuts
    - name: "📌 Create Desktop Shortcuts"
      run: |
        Write-Host "📝 Creating shortcuts..."
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\FenixGaga\Engine\ProjectTitan.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Free Fire.lnk"
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\ninjaripper\x86\NinjaRipper.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Ninjaripper.lnk"
        New-Item -ItemType SymbolicLink -Target "C:\Users\$Env:USERNAME\Documents\noesis\Noesis64.exe" -Path "C:\Users\$Env:USERNAME\Desktop\Noesis.lnk"
        Write-Host "✅ Shortcuts created successfully!"

    # 🔄 Establish Connection
    - name: "🔗 Connect Remote Desktop"
      continue-on-error: true
      run: |
        Write-Host "🖥️ Connecting to VM with Remote Desktop..."
        ${{ inputs.code }} --pin=123456
        Write-Host "✅ Connection established!"

    # ⏳ Keep Session Alive
    - name: "⏳ Maintain Connection (30 days)"
      run: |
        Write-Host "⏰ Session will remain active for 30 days..."
        $i = 43800  # 30 days in minutes
        do {
            Write-Host "⏱️ Time remaining: $i minutes"
            Start-Sleep 60
            $i--
        } while ($i -gt 0)
        Write-Host "⌛ Session timeout reached"
